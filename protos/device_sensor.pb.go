// Code generated by protoc-gen-go. DO NOT EDIT.
// source: device_sensor

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DeviceSensor struct {
	DeviceSN             string   `protobuf:"bytes,1,opt,name=DeviceSN,proto3" json:"DeviceSN,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	DevEUI               string   `protobuf:"bytes,11,opt,name=DevEUI,proto3" json:"DevEUI,omitempty"`
	AppEUI               string   `protobuf:"bytes,12,opt,name=AppEUI,proto3" json:"AppEUI,omitempty"`
	AppKey               string   `protobuf:"bytes,13,opt,name=AppKey,proto3" json:"AppKey,omitempty"`
	Freq                 string   `protobuf:"bytes,14,opt,name=Freq,proto3" json:"Freq,omitempty"`
	CustomerID           uint64   `protobuf:"varint,21,opt,name=CustomerID,proto3" json:"CustomerID,omitempty"`
	DeviceTypeID         uint64   `protobuf:"varint,22,opt,name=DeviceTypeID,proto3" json:"DeviceTypeID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceSensor) Reset()         { *m = DeviceSensor{} }
func (m *DeviceSensor) String() string { return proto.CompactTextString(m) }
func (*DeviceSensor) ProtoMessage()    {}
func (*DeviceSensor) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_sensor_6443b7cc29c76e12, []int{0}
}
func (m *DeviceSensor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceSensor.Unmarshal(m, b)
}
func (m *DeviceSensor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceSensor.Marshal(b, m, deterministic)
}
func (dst *DeviceSensor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceSensor.Merge(dst, src)
}
func (m *DeviceSensor) XXX_Size() int {
	return xxx_messageInfo_DeviceSensor.Size(m)
}
func (m *DeviceSensor) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceSensor.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceSensor proto.InternalMessageInfo

func (m *DeviceSensor) GetDeviceSN() string {
	if m != nil {
		return m.DeviceSN
	}
	return ""
}

func (m *DeviceSensor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeviceSensor) GetDevEUI() string {
	if m != nil {
		return m.DevEUI
	}
	return ""
}

func (m *DeviceSensor) GetAppEUI() string {
	if m != nil {
		return m.AppEUI
	}
	return ""
}

func (m *DeviceSensor) GetAppKey() string {
	if m != nil {
		return m.AppKey
	}
	return ""
}

func (m *DeviceSensor) GetFreq() string {
	if m != nil {
		return m.Freq
	}
	return ""
}

func (m *DeviceSensor) GetCustomerID() uint64 {
	if m != nil {
		return m.CustomerID
	}
	return 0
}

func (m *DeviceSensor) GetDeviceTypeID() uint64 {
	if m != nil {
		return m.DeviceTypeID
	}
	return 0
}

func init() {
	proto.RegisterType((*DeviceSensor)(nil), "protos.DeviceSensor")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DeviceSensorServiceClient is the client API for DeviceSensorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceSensorServiceClient interface {
	Add(ctx context.Context, in *DeviceSensor, opts ...grpc.CallOption) (*Empty, error)
	Update(ctx context.Context, in *DeviceSensor, opts ...grpc.CallOption) (*Empty, error)
	Delete(ctx context.Context, in *DeviceSensor, opts ...grpc.CallOption) (*Empty, error)
}

type deviceSensorServiceClient struct {
	cc *grpc.ClientConn
}

func NewDeviceSensorServiceClient(cc *grpc.ClientConn) DeviceSensorServiceClient {
	return &deviceSensorServiceClient{cc}
}

func (c *deviceSensorServiceClient) Add(ctx context.Context, in *DeviceSensor, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protos.DeviceSensorService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceSensorServiceClient) Update(ctx context.Context, in *DeviceSensor, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protos.DeviceSensorService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceSensorServiceClient) Delete(ctx context.Context, in *DeviceSensor, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protos.DeviceSensorService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceSensorServiceServer is the server API for DeviceSensorService service.
type DeviceSensorServiceServer interface {
	Add(context.Context, *DeviceSensor) (*Empty, error)
	Update(context.Context, *DeviceSensor) (*Empty, error)
	Delete(context.Context, *DeviceSensor) (*Empty, error)
}

func RegisterDeviceSensorServiceServer(s *grpc.Server, srv DeviceSensorServiceServer) {
	s.RegisterService(&_DeviceSensorService_serviceDesc, srv)
}

func _DeviceSensorService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceSensor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceSensorServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.DeviceSensorService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceSensorServiceServer).Add(ctx, req.(*DeviceSensor))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceSensorService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceSensor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceSensorServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.DeviceSensorService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceSensorServiceServer).Update(ctx, req.(*DeviceSensor))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceSensorService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceSensor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceSensorServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.DeviceSensorService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceSensorServiceServer).Delete(ctx, req.(*DeviceSensor))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceSensorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.DeviceSensorService",
	HandlerType: (*DeviceSensorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _DeviceSensorService_Add_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DeviceSensorService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DeviceSensorService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "device_sensor",
}

func init() { proto.RegisterFile("device_sensor", fileDescriptor_device_sensor_6443b7cc29c76e12) }

var fileDescriptor_device_sensor_6443b7cc29c76e12 = []byte{
	// 243 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xcd, 0x4a, 0x03, 0x31,
	0x10, 0x80, 0x89, 0x96, 0x45, 0xc7, 0xae, 0x87, 0x51, 0x4b, 0xd8, 0x83, 0x94, 0x9e, 0x8a, 0x60,
	0x0f, 0xfa, 0x04, 0xc5, 0x54, 0x58, 0x0a, 0x3d, 0xb4, 0xf6, 0x2c, 0xb5, 0x99, 0x83, 0x60, 0x9a,
	0x98, 0xc4, 0x42, 0x9e, 0xc6, 0x37, 0xf3, 0x59, 0x24, 0xc9, 0xb6, 0x6c, 0x6f, 0x7b, 0x9b, 0xef,
	0xe3, 0x63, 0xc8, 0x0f, 0x94, 0x92, 0xf6, 0x9f, 0x5b, 0x7a, 0x77, 0xb4, 0x73, 0xda, 0x62, 0x61,
	0xac, 0xf6, 0xda, 0x55, 0xc5, 0x56, 0x2b, 0xa5, 0x77, 0xa3, 0x3f, 0x06, 0x7d, 0x91, 0x8a, 0x55,
	0x0e, 0x2a, 0xb8, 0x68, 0x78, 0xc1, 0xd9, 0x90, 0x8d, 0x2f, 0x97, 0x47, 0x46, 0x84, 0xde, 0x62,
	0xa3, 0x88, 0x9f, 0x25, 0x9f, 0x66, 0x1c, 0x40, 0x21, 0x68, 0x3f, 0x5b, 0xd7, 0xfc, 0x2a, 0xd9,
	0x86, 0xa2, 0x9f, 0x1a, 0x13, 0x7d, 0x3f, 0xfb, 0x4c, 0x8d, 0x9f, 0x53, 0xe0, 0xe5, 0xd1, 0xcf,
	0x29, 0xc4, 0xdd, 0xaf, 0x96, 0xbe, 0xf9, 0x75, 0xde, 0x1d, 0x67, 0xbc, 0x07, 0x78, 0xf9, 0x71,
	0x5e, 0x2b, 0xb2, 0xb5, 0xe0, 0x77, 0x43, 0x36, 0xee, 0x2d, 0x5b, 0x06, 0x47, 0x87, 0xb3, 0xbf,
	0x05, 0x43, 0xb5, 0xe0, 0x83, 0x54, 0x9c, 0xb8, 0xa7, 0x5f, 0x06, 0x37, 0xed, 0x0b, 0xae, 0xc8,
	0x46, 0xc0, 0x07, 0x38, 0x9f, 0x4a, 0x89, 0xb7, 0x93, 0xfc, 0x20, 0x93, 0x76, 0x53, 0x95, 0x07,
	0x3b, 0x53, 0xc6, 0x07, 0x7c, 0x84, 0x62, 0x6d, 0xe4, 0xc6, 0x53, 0xe7, 0x5c, 0xd0, 0x17, 0x75,
	0xcc, 0x3f, 0xf2, 0x97, 0x3c, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0xb7, 0xca, 0x8d, 0xaa, 0xaa,
	0x01, 0x00, 0x00,
}
