// Code generated by protoc-gen-go. DO NOT EDIT.
// source: manhole_cover

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ManholeCoverDevice struct {
	ID                   uint64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	SerialNumber         string   `protobuf:"bytes,3,opt,name=SerialNumber,proto3" json:"SerialNumber,omitempty"`
	Description          string   `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	Position             string   `protobuf:"bytes,5,opt,name=Position,proto3" json:"Position,omitempty"`
	Group                string   `protobuf:"bytes,11,opt,name=Group,proto3" json:"Group,omitempty"`
	GroupID              uint64   `protobuf:"varint,12,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	DeviceType           string   `protobuf:"bytes,13,opt,name=DeviceType,proto3" json:"DeviceType,omitempty"`
	DeviceTypeID         uint64   `protobuf:"varint,14,opt,name=DeviceTypeID,proto3" json:"DeviceTypeID,omitempty"`
	DeviceModel          string   `protobuf:"bytes,15,opt,name=DeviceModel,proto3" json:"DeviceModel,omitempty"`
	DeviceModelID        uint64   `protobuf:"varint,16,opt,name=DeviceModelID,proto3" json:"DeviceModelID,omitempty"`
	Customer             string   `protobuf:"bytes,17,opt,name=Customer,proto3" json:"Customer,omitempty"`
	CustomerID           uint64   `protobuf:"varint,18,opt,name=CustomerID,proto3" json:"CustomerID,omitempty"`
	Latitude             float64  `protobuf:"fixed64,21,opt,name=Latitude,proto3" json:"Latitude,omitempty"`
	Longitude            float64  `protobuf:"fixed64,22,opt,name=Longitude,proto3" json:"Longitude,omitempty"`
	StatusCode           uint64   `protobuf:"varint,31,opt,name=StatusCode,proto3" json:"StatusCode,omitempty"`
	Status               string   `protobuf:"bytes,32,opt,name=Status,proto3" json:"Status,omitempty"`
	MID                  uint64   `protobuf:"varint,33,opt,name=MID,proto3" json:"MID,omitempty"`
	UplinkAt             string   `protobuf:"bytes,34,opt,name=UplinkAt,proto3" json:"UplinkAt,omitempty"`
	NID                  uint64   `protobuf:"varint,35,opt,name=NID,proto3" json:"NID,omitempty"`
	AlertAt              string   `protobuf:"bytes,36,opt,name=AlertAt,proto3" json:"AlertAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ManholeCoverDevice) Reset()         { *m = ManholeCoverDevice{} }
func (m *ManholeCoverDevice) String() string { return proto.CompactTextString(m) }
func (*ManholeCoverDevice) ProtoMessage()    {}
func (*ManholeCoverDevice) Descriptor() ([]byte, []int) {
	return fileDescriptor_manhole_cover_35f84784e96fcff3, []int{0}
}
func (m *ManholeCoverDevice) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ManholeCoverDevice.Unmarshal(m, b)
}
func (m *ManholeCoverDevice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ManholeCoverDevice.Marshal(b, m, deterministic)
}
func (dst *ManholeCoverDevice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManholeCoverDevice.Merge(dst, src)
}
func (m *ManholeCoverDevice) XXX_Size() int {
	return xxx_messageInfo_ManholeCoverDevice.Size(m)
}
func (m *ManholeCoverDevice) XXX_DiscardUnknown() {
	xxx_messageInfo_ManholeCoverDevice.DiscardUnknown(m)
}

var xxx_messageInfo_ManholeCoverDevice proto.InternalMessageInfo

func (m *ManholeCoverDevice) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ManholeCoverDevice) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ManholeCoverDevice) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *ManholeCoverDevice) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ManholeCoverDevice) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *ManholeCoverDevice) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *ManholeCoverDevice) GetGroupID() uint64 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *ManholeCoverDevice) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *ManholeCoverDevice) GetDeviceTypeID() uint64 {
	if m != nil {
		return m.DeviceTypeID
	}
	return 0
}

func (m *ManholeCoverDevice) GetDeviceModel() string {
	if m != nil {
		return m.DeviceModel
	}
	return ""
}

func (m *ManholeCoverDevice) GetDeviceModelID() uint64 {
	if m != nil {
		return m.DeviceModelID
	}
	return 0
}

func (m *ManholeCoverDevice) GetCustomer() string {
	if m != nil {
		return m.Customer
	}
	return ""
}

func (m *ManholeCoverDevice) GetCustomerID() uint64 {
	if m != nil {
		return m.CustomerID
	}
	return 0
}

func (m *ManholeCoverDevice) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *ManholeCoverDevice) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *ManholeCoverDevice) GetStatusCode() uint64 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *ManholeCoverDevice) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ManholeCoverDevice) GetMID() uint64 {
	if m != nil {
		return m.MID
	}
	return 0
}

func (m *ManholeCoverDevice) GetUplinkAt() string {
	if m != nil {
		return m.UplinkAt
	}
	return ""
}

func (m *ManholeCoverDevice) GetNID() uint64 {
	if m != nil {
		return m.NID
	}
	return 0
}

func (m *ManholeCoverDevice) GetAlertAt() string {
	if m != nil {
		return m.AlertAt
	}
	return ""
}

type ManholeCoverDeviceList struct {
	List                 []*ManholeCoverDevice `protobuf:"bytes,1,rep,name=List,proto3" json:"List,omitempty"`
	Count                uint64                `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
	CurrentPage          uint64                `protobuf:"varint,10,opt,name=CurrentPage,proto3" json:"CurrentPage,omitempty"`
	PageSize             uint64                `protobuf:"varint,11,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
	TotalCount           uint64                `protobuf:"varint,12,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ManholeCoverDeviceList) Reset()         { *m = ManholeCoverDeviceList{} }
func (m *ManholeCoverDeviceList) String() string { return proto.CompactTextString(m) }
func (*ManholeCoverDeviceList) ProtoMessage()    {}
func (*ManholeCoverDeviceList) Descriptor() ([]byte, []int) {
	return fileDescriptor_manhole_cover_35f84784e96fcff3, []int{1}
}
func (m *ManholeCoverDeviceList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ManholeCoverDeviceList.Unmarshal(m, b)
}
func (m *ManholeCoverDeviceList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ManholeCoverDeviceList.Marshal(b, m, deterministic)
}
func (dst *ManholeCoverDeviceList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManholeCoverDeviceList.Merge(dst, src)
}
func (m *ManholeCoverDeviceList) XXX_Size() int {
	return xxx_messageInfo_ManholeCoverDeviceList.Size(m)
}
func (m *ManholeCoverDeviceList) XXX_DiscardUnknown() {
	xxx_messageInfo_ManholeCoverDeviceList.DiscardUnknown(m)
}

var xxx_messageInfo_ManholeCoverDeviceList proto.InternalMessageInfo

func (m *ManholeCoverDeviceList) GetList() []*ManholeCoverDevice {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ManholeCoverDeviceList) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ManholeCoverDeviceList) GetCurrentPage() uint64 {
	if m != nil {
		return m.CurrentPage
	}
	return 0
}

func (m *ManholeCoverDeviceList) GetPageSize() uint64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ManholeCoverDeviceList) GetTotalCount() uint64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func init() {
	proto.RegisterType((*ManholeCoverDevice)(nil), "protos.ManholeCoverDevice")
	proto.RegisterType((*ManholeCoverDeviceList)(nil), "protos.ManholeCoverDeviceList")
}

func init() { proto.RegisterFile("manhole_cover", fileDescriptor_manhole_cover_35f84784e96fcff3) }

var fileDescriptor_manhole_cover_35f84784e96fcff3 = []byte{
	// 440 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x93, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xe5, 0xc4, 0x2d, 0x74, 0xd2, 0x94, 0xb2, 0x82, 0x68, 0x54, 0x21, 0x30, 0xa1, 0x87,
	0x9c, 0x72, 0x80, 0x27, 0x88, 0xbc, 0x12, 0x5a, 0x29, 0x89, 0x2a, 0xa7, 0x9c, 0x91, 0x9b, 0x8c,
	0xc2, 0x0a, 0xc7, 0x6b, 0xad, 0xd7, 0x95, 0xe0, 0xd9, 0x78, 0x16, 0x9e, 0x05, 0xed, 0x2c, 0x76,
	0x1c, 0xe5, 0x94, 0xf9, 0xfe, 0x7f, 0x66, 0xf4, 0x3b, 0x1e, 0xc3, 0xf8, 0x90, 0x97, 0x3f, 0x4c,
	0x41, 0xdf, 0xb7, 0xe6, 0x99, 0xac, 0xb8, 0xac, 0xac, 0x71, 0xa6, 0x9e, 0xfe, 0x8d, 0x41, 0xac,
	0x82, 0x93, 0x7a, 0x43, 0xd2, 0xb3, 0xde, 0x92, 0xb8, 0x81, 0x81, 0x92, 0x18, 0x25, 0xd1, 0x2c,
	0xce, 0x06, 0x4a, 0x0a, 0x01, 0xf1, 0x3a, 0x3f, 0x10, 0x0e, 0x92, 0x68, 0x76, 0x95, 0x71, 0x2d,
	0xa6, 0x70, 0xbd, 0x21, 0xab, 0xf3, 0x62, 0xdd, 0x1c, 0x9e, 0xc8, 0xe2, 0x90, 0xbd, 0x13, 0x4d,
	0x24, 0x30, 0x92, 0x54, 0x6f, 0xad, 0xae, 0x9c, 0x36, 0x25, 0xc6, 0xdc, 0xd2, 0x97, 0xc4, 0x1d,
	0xbc, 0x7c, 0x30, 0xb5, 0x66, 0xfb, 0x82, 0xed, 0x8e, 0xc5, 0x1b, 0xb8, 0xf8, 0x6a, 0x4d, 0x53,
	0xe1, 0x88, 0x8d, 0x00, 0x02, 0xe1, 0x05, 0x17, 0x4a, 0xe2, 0x35, 0x07, 0x6c, 0x51, 0xbc, 0x07,
	0x08, 0xf9, 0x1f, 0x7f, 0x55, 0x84, 0x63, 0x1e, 0xea, 0x29, 0x3e, 0xf1, 0x91, 0x94, 0xc4, 0x1b,
	0x1e, 0x3f, 0xd1, 0x42, 0x62, 0xcf, 0x2b, 0xb3, 0xa3, 0x02, 0x5f, 0xb5, 0x89, 0x3b, 0x49, 0xdc,
	0xc3, 0xb8, 0x87, 0x4a, 0xe2, 0x2d, 0xaf, 0x39, 0x15, 0xfd, 0x73, 0xa5, 0x4d, 0xed, 0xcc, 0x81,
	0x2c, 0xbe, 0x0e, 0xcf, 0xd5, 0xb2, 0xcf, 0xd9, 0xd6, 0x4a, 0xa2, 0xe0, 0xf1, 0x9e, 0xe2, 0x67,
	0x97, 0xb9, 0xd3, 0xae, 0xd9, 0x11, 0xbe, 0x4d, 0xa2, 0x59, 0x94, 0x75, 0x2c, 0xde, 0xc1, 0xd5,
	0xd2, 0x94, 0xfb, 0x60, 0x4e, 0xd8, 0x3c, 0x0a, 0x7e, 0xf3, 0xc6, 0xe5, 0xae, 0xa9, 0x53, 0xb3,
	0x23, 0xfc, 0x10, 0x36, 0x1f, 0x15, 0x31, 0x81, 0xcb, 0x40, 0x98, 0x70, 0xa6, 0xff, 0x24, 0x6e,
	0x61, 0xb8, 0x52, 0x12, 0x3f, 0xf2, 0x80, 0x2f, 0x7d, 0x86, 0x6f, 0x55, 0xa1, 0xcb, 0x9f, 0x0b,
	0x87, 0xd3, 0x90, 0xbf, 0x65, 0xdf, 0xbd, 0x56, 0x12, 0x3f, 0x85, 0xee, 0xb5, 0x92, 0xfe, 0x9d,
	0x2c, 0x0a, 0xb2, 0x6e, 0xe1, 0xf0, 0x9e, 0x9b, 0x5b, 0x9c, 0xfe, 0x89, 0x60, 0x72, 0x7e, 0x60,
	0x4b, 0x5d, 0x3b, 0x31, 0x87, 0xd8, 0xff, 0x62, 0x94, 0x0c, 0x67, 0xa3, 0xcf, 0x77, 0xf3, 0x70,
	0x92, 0xf3, 0xf3, 0xee, 0x8c, 0xfb, 0xfc, 0x39, 0xa4, 0xa6, 0x29, 0x1d, 0x5f, 0x61, 0x9c, 0x05,
	0xf0, 0x2f, 0x2c, 0x6d, 0xac, 0xa5, 0xd2, 0x3d, 0xe4, 0x7b, 0x42, 0x60, 0xaf, 0x2f, 0xf1, 0x89,
	0xe5, 0x7b, 0xda, 0xe8, 0xdf, 0xc4, 0x97, 0x14, 0x67, 0x1d, 0xfb, 0x3f, 0xec, 0xd1, 0xb8, 0xbc,
	0x08, 0x8b, 0xc3, 0x3d, 0xf5, 0x94, 0xa7, 0xf0, 0x9d, 0x7c, 0xf9, 0x17, 0x00, 0x00, 0xff, 0xff,
	0x1f, 0x7e, 0xdd, 0xa2, 0x3f, 0x03, 0x00, 0x00,
}
